# Generation of large fortran source files
RUBY_GENERATE=env ruby $2 $1; if test "$$?" != 0; then  echo && echo && echo  "Warning: no ruby: $1 is not updated!!!" && echo && echo; fi




# If USE_AUTOTOOLS is off build simpledataio in the same way as gs2
# Note that any value other than "on" is considered to be "off"
ifneq ($(USE_AUTOTOOLS),on)

ifdef USE_MPI
CPPFLAGS += -DHAVE_MPI
endif

CPPFLAGS+= -DFORTRAN_NETCDF -DISO_C_BINDING

ifdef USE_PARALLEL_NETCDF
	CPPFLAGS += -DPARALLEL
endif

CFLAGS+= -Idiagnostics/simpledataio

SIMPLEDATAIO_LIB_DIR_ABS=$(PWD)
SIMPLEDATAIO_LIB_ABS=$(PWD)/libsimpledataio.a
SIMPLEDATAIO_LIB=libsimpledataio.a




distclean_simpledataio:
clean_simpledataio:
simpledataio:

SIMPLEDATAIO_VPATH=:diagnostics/simpledataio/src/:../diagnostics/simpledataio/src/:diagnostics/simpledataio/include/:../diagnostics/simpledataio/include/

diagnostics: libsimpledataio.a

libsimpledataio.a: simpledataio_write.o simpledataiof.o simpledataio.o
	$(ARCH) $(ARCHFLAGS) $@ $^
	$(RANLIB) $@

simpledataio_write.o: simpledataio_write.f90 simpledataiof.o
	$(FC) $(subst $(DBLEFLAGS),,$(F90FLAGS)) $(F90FLAGS_SFXJUNK) -c $<

simpledataiof.o: simpledataiof.f90 simpledataio.o 
	$(FC) $(subst $(DBLEFLAGS),,$(F90FLAGS)) $(F90FLAGS_SFXJUNK) -c $<

simpledataio.o: diagnostics/simpledataio/include/definitions.h diagnostics/simpledataio/include/simpledataio.h

#ifdef DBLE
#CPPFLAGS+=-DSDATIO_DEFAULT_DOUBLE
#endif

diagnostics/simpledataio/src/simpledataio_write.F90: diagnostics/simpledataio/src/generate_simpledataio_write.rb
	$(call RUBY_GENERATE,$@,$<)







else # i.e. if USE_AUTOTOOLS=on


$(error "the autotools scripts have been removed from the repository")


endif # ifndef USE_AUTOTOOLS

# Commands for generating repetitive Fortran files from Ruby scripts
diagnostics/diagnostics_create_and_write.f90: diagnostics/generate_diagnostics_create_and_write.rb 
	$(call RUBY_GENERATE,$@,$<)
diagnostics/diagnostics_config.f90: diagnostics/generate_diagnostics_config.rb  
	$(call RUBY_GENERATE,$@,$<)
diagnostics/diagnostics_ascii.f90: diagnostics/generate_diagnostics_ascii.rb  
	$(call RUBY_GENERATE,$@,$<)

# This must be built without promotion of reals to doubles
diagnostics_create_and_write.o: diagnostics_create_and_write.f90
	$(FC) $(subst $(DBLEFLAGS),,$(F90FLAGS)) $(F90FLAGS_SFXJUNK) -c $<


# This line ensures that libsimpledataio is built before any of the diagnostics
# modules
diagnostics_ascii.o diagnostics_dimensions.o: $(SIMPLEDATAIO_LIB)
