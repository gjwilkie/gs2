This text explaines Makefile.new written by RN.

* Overview

Makefile.new is written to combine the makefiles in agk, gs2 and gs2/utils,
gs2/geo. I believe this new makefile can reduce the cost of maintenance of
the makefiles, and can also simplify the task to port agk/gs2 into new systems.

I hope users smoothly move to this new makefile, and it replaces current
Makfile after testing.

In this new makefile, users are requested to prepare their system 
settings in Makefiles/Makefile.$(SYSTEM) where SYSTEM is typically 
the host name (SYSTEM=`hostname`). Most of the settings in current Makefile
is stored in Makefiles/ directory with appropriate naming. They are tested 
only on franklin and bassi at NERSC. I would like to ask users using other
systems to test this new makefile and/or to rewrite correctly.

* Compile

Because Makefile.new reads some files in Makefiles/ directory users should
give -IMakefiles option to the make command. Alternatively, MAKEFLAGS
environment variable do the same thing. So, the typicall make procedure 
becomes like this

 # make -IMakefiles -f Makefile.new

or

 # setenv MAKEFLAGS -IMakefiles (tcsh)
 # export MAKEFLAGS=-IMakefiles (bash)
 # make -f Makefile.new

For utils and geo directories in gs2, do as follows,

 # make -I.. -I../Makefiles -f ../Makefile.new

If you want to invoke STATIC, DEBUG flags,
 
 # env DEBUG=on make -IMakefiles -f Makefile.new

Note that DEBUG=off means DEBUG is defined because, in the new makefile, 
this flag is just checked if it is defined or not, but not checked
what value it has.  Be careful!

* Porting

Users of new system needs to prepare Makefile.$(SYSTEM) in Makefiles/
directory. In this file, most simply, you just needs to set your compiler
and to include your compiler's setting as written in Makefile.simple.
If FFT, NETCDF libraries are not in standard places, define FFT_INC,
FFT_LIB, NETCDF_INC, NETCDF_LIB in this file.
Write other your host's specific setting if necessary.

Makefile.local is another recommended file to write your local settings.
This file is always included if exists.

* Dependency

I also separated the dependency into Makefile.depend which is auto-generated by
the depend target using my own perl script. I decided to distibute
Makefile.depend rather than to distribute the script itself because 
"make depend" process is a bit complicated and may confuse users.
But, I'm happy to give you the script if you want.

* TODO

1. test
2. auto detection of the system for common system (like test_os script)
3. all PLATFORM_LINKS related work-arounds makes the file ugly.
   can be removed by using preprocessor.
