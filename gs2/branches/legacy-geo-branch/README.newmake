This text explains Makefile.new written by RN.

* Overview

Makefile.new is written to combine the makefiles in agk, gs2 and gs2/utils,
gs2/geo. I believe this new makefile can reduce the cost of maintenance of
the makefiles, and can also simplify the task to port agk/gs2 into new systems.

Now, the new makefile incorporates preprocessing, instead of symbolic linking,
to absorb platform and compiler dependences, which is newly added to the old 
makefile in agk. (gs2 still uses linking. Accordingly, some of the explanations
below do not apply to gs2.)

I hope users smoothly move to this new makefile, and it replaces current
Makefile after testing.

In this new makefile, users are requested to prepare their system 
settings in Makefiles/Makefile.$(SYSTEM) where SYSTEM is typically 
the host name (SYSTEM=`hostname`). Most of the settings in current Makefile
is stored in Makefiles/ directory with appropriate naming. They are tested 
on limited hosts. I would like to ask users using other systems to test this
new makefile and/or to rewrite correctly. 

* Compile

Because Makefile.new reads some files in Makefiles/ directory users should
give -IMakefiles option to the make command. Alternatively, MAKEFLAGS
environment variable do the same thing. So, the typical make procedure 
becomes like this

 # make -IMakefiles -f Makefile.new

or

 # setenv MAKEFLAGS -IMakefiles (tcsh)
 # export MAKEFLAGS=-IMakefiles (bash)
 # make -f Makefile.new

For utils and geo directories in gs2, do as follows,

 # make -I.. -I../Makefiles -f ../Makefile.new

The default target is automatically chosen depending on where you are making.

We have prepared some compile-time switches. To invoke them, add SWITCH=value
to your make command. For example, if you want to invoke DEBUG flags,
 
 # make -IMakefiles -f Makefile.new DEBUG=on

Following is the full list of switches:
 DEBUG (defined [undefined]): turns on debug mode
 TEST (defined [undefined]): turns on test mode (not working yet)
 PROF (defined [undefined]): turns on profiling mode
 OPT (defined,aggressive [defined]): optimization
 STATIC (defined, [undefined]): prevents linking with shared libraries
 MPI (defined [defined]): turns on distributed memory parallelization with MPI
 DBLE (defined [defined]): promotes precisions of real and complex
 USE_FFT (fftw [fftw]): FFT library to use
 USE_NETCDF (new,old [new]): NETCDF library to use
 USE_HDF5 (defined [undefined]): use HDF5 library or no
 USE_C_INDEX (defined [undefined]): use function pointer
 USE_NR_RAN (defined [undefined]): use Numerical Recipes local random 
 	    	     		   number generator

Values that each switches takes are shown in the bracket, where
"defined" ("undefined") means whether the switch is defined (or not),
but not having that value. (Technically speaking, ifdef statement is 
used in the makefile.) Thus, note that DEBUG=off means DEBUG is defined
because this flag is just checked if it is defined or not. Be careful!

In the square bracket, default values in the main makefile (Makefile.new)
are given. Some of those default values are overwritten depending on
hosts, compilers, and also environment variables. This implies that,
for some systems where "module" is provided, those default values are 
set properly depending on what modules are loaded.

* Porting

Users of new system needs to prepare Makefile.$(SYSTEM) in Makefiles/
directory. In this file, most simply, you just needs to set your compiler
and to include your compiler's setting as written in Makefile.simple.
If FFT, NETCDF libraries are not in standard places, define FFT_INC,
FFT_LIB, NETCDF_INC, NETCDF_LIB in this file.
Write other your host's specific setting if necessary.

Makefile.local is another recommended file to write your local settings.
This file is always included if exists.

* Dependency

I also separated the dependency into Makefile.depend which is auto-generated by
the depend target using my own perl script. I decided to distribute
Makefile.depend rather than to distribute the script itself because 
"make depend" process is a bit complicated and may confuse users.
But, I'm happy to give you the script if you want.

* TODO

1. test
2. auto detection of the system for common system (like test_os script)
3. Makefile.HOSTNAME_* are probably host-specific setting extracted from
   old makefile. If still used, give nice names, otherwise, remove them.
4. all PLATFORM_LINKS related work-arounds makes the file ugly.
   can be removed by using preprocessor.
5. most of gs2 specific setting can be avoidable after rewriting the code
   appropriately.
