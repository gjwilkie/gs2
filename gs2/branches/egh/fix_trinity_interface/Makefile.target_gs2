gs2_all: diagnostics modules gs2 ingen rungridgen generate_fftw_wisdom

#Main code
gs2: $(gs2_mod) $(SIMPLEDATAIO_LIB)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Main code, may not work as missing SIMPLEDATAIO_LIB dependency
gs2.x: $(gs2_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

#Input file checker
ingen: $(ingen_mod) $(SIMPLEDATAIO_LIB)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Utility to produce fftw wisdom files for given problem size
generate_fftw_wisdom: $(generate_fftw_wisdom_mod) $(SIMPLEDATAIO_LIB)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Calculates the field response matrix for current input file and writes to file
dump_response: $(dump_response_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Initialises theta, kx, ky, lambda and energy grids and writes to file
dump_grids: $(dump_grids_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Calculates the ideal ballooning stability (optionally over a scan in shat/beta_prime)
ideal_ball: $(ideal_ball_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS) 

#Driver program for gridgen?
rungridgen: $(rungridgen_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

#A simple program to test linear regression on random data || Not at all gs2 specific!
regress: $(drive_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

#A program which test the fft transforms used in GS2
ffttester: $(ffttester_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

.PHONY: modules utils_all geo_all libgs2_all

#ifdef MAKE_LIB
modules: utils.a geo.a libgs2.a diagnostics
#else
#modules: utils.a geo.a diagnostics
#endif

### UTILS
utils_all: utils.a 

UTIL_OBJ = spl.o constants.o file_utils.o netcdf_utils.o command_line.o runtime_tests.o
utils.a: $(UTIL_OBJ)
	$(ARCH) $(ARCHFLAGS) $@ $^
	$(RANLIB) $@

### GEO
geo_all: geo.a eiktest ball

GEO_OBJ = geometry.o geq.o eeq.o peq.o leq.o deq.o ideq.o ceq.o read_chease.o

geo.a: $(GEO_OBJ)
	$(ARCH) $(ARCHFLAGS) $@ $^
	$(RANLIB) $@

geo_c: geometry_c_driver.o ../geo.a ../utils.a  
	#$(FC) -o  $@ $^ ${F90FLAGS} ${GEO_OBJ} -lnetcdff -lfftw
	#$(FC) -o  geo_c geometry_c_driver.o geo.a ../utils.a  -lnetcdff -lfftw ceq.o read_chease.o command_line.o
	$(FC) -o  geo_c geometry_c_driver.o ../geo.a ../utils.a -Mnomain 

geo_c.a: geometry_c_interface.o ../geo.a ../utils.a  
	#$(FC) -o  $@ $^ ${F90FLAGS} ${GEO_OBJ} -lnetcdff -lfftw
	#$(FC) -o  geo_c geometry_c_driver.o geo.a ../utils.a  -lnetcdff -lfftw ceq.o read_chease.o command_line.o
	$(FC) -o  geo_c2.a geometry_c_interface.o ../geo.a ../utils.a -Mnomain -Mnostartup -Mnostdlib

#Program to calculate ideal MHD ballooning stability
ball: $(ball_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

#Program to calculate eikcoeffs (geometry coefficients etc.) and write to file
eiktest: $(eiktest_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

# ifdef MAKE_LIB
### LIBGS2
libgs2_all: libgs2.a

#LIBGS2_OBJ = antenna.o antenna_data.o collisions.o command_line.o constants.o \
#	convert.o deq.o dist_fn.o dist_fn_arrays.o eeq.o fft_work.o fields.o \
#	fields_arrays.o fields_explicit.o fields_implicit.o fields_test.o \
#	file_utils.o geometry.o geq.o gridgen4mod.o gs2_diagnostics.o \
#	gs2_heating.o gs2_io.o gs2_layouts.o gs2_main.o gs2_reinit.o \
#	gs2_save.o gs2_time.o gs2_transforms.o hyper.o ideq.o \
#	init_g.o job_manage.o kt_grids.o layouts_type.o le_grids.o leq.o \
#	mp.o netcdf_utils.o nonlinear_terms.o peq.o prof.o \
#	ran.o redistribute.o run_parameters.o species.o spfunc.o \
#	spl.o text_options.o theta_grid.o theta_grid_params.o

#libgs2.a: $(LIBGS2_OBJ)
#libgs2.a: $(gs2_mod)
libgs2.a: $(filter-out gs2.o simpledataiof.o simpledataio_write.o, $(gs2_mod))
	$(ARCH) $(ARCHFLAGS) $@ $^
	$(RANLIB) $@
# endif

distclean:
	-rm -f gs2 gs2.x
	-rm -f ingen rungridgen regress
	-rm -f ball eiktest
	-rm -f ffttester
	-rm -f dump_response
	-rm -f dump_grids
	-rm -f ideal_ball
	-rm -f generate_fftw_wisdom
